# define application variables
CLUSTER_NAME= "brnpb"                          # ie. brnpb
APP_NAME = "spring-boot-bedrock"                                 # ie. idm-idp
APP_ROLE = "hmheng_customdev"                                 # ie. hmheng-idm
DOCKER_GROUP = "com-hmhco-custom-dev"                         # ie. com-hmhco-idm or io-hmheng-demo
DOCKER_REGISTRY = "docker.br.hmheng.io"                 # ie. docker.br.hmheng.io
AWS_REGION = "us-east-1"                                # ie. us-east-1

## aurora cli bind
# aurora update start <cluster>/<role>/<stage>/<app-name> --bind tag=<docker-container-tag>
# EXAMPLE: aurora update start brnpb-us-east-1/hmheng-idm/prod/idm-idp --bind tag=2a254670434a49ddd7e1651b74b08d770246c586

try:
    import getpass
except ImportError:
    print "Python Module `getpass` is required, please install it 'pip install -U getpass'."

class Profile(Struct):
    cluster = Default(String, CLUSTER_NAME + "-" + AWS_REGION)
    stage = Default(String, "prod")
    environment = Default(String, "prod")
    contact = Default(String, "")
    instances = Default(Integer, 3)
    version = Default(String, "n/a")
    production = Default(Boolean, True)
    role = Default(String, getpass.getuser())
    docker_container = Default(String, DOCKER_REGISTRY + "/" + DOCKER_GROUP + "/" + APP_NAME)
    docker_tag = Default(String, "{{tag}}")
    autoscaling=Default(String,"standard-prod")

# -- profile mappings ---
# prod|prod
# prodrv|staging3
# certrv|staging2
# cert|staging1
# int staging0
# dev devel

# -- profile instantiations (if any) ---
PRODUCTION = Profile()
PRODRV = Profile(
    instances=3,
    stage="prodrv",
    environment="staging3",
    cluster=CLUSTER_NAME + "-" + AWS_REGION,
    production=True,
    autoscaling="standard-nonprod"
)

CERTRV = Profile(
    instances=3,
    stage="certrv",
    environment="staging2",
    cluster=CLUSTER_NAME + "-" + AWS_REGION,
    production=True,
    autoscaling="standard-nonprod"
)

CERT = Profile(
    instances=3,
    stage="cert",
    environment="staging1",
    cluster=CLUSTER_NAME + "-" + AWS_REGION,
    production=True,
    autoscaling="standard-nonprod"
)

INT = Profile(
    instances=1,
    stage="int",
    environment="staging0",
    cluster=CLUSTER_NAME + "-" + AWS_REGION,
    production=False,
    autoscaling="standard-nonprod"
)
DEV = Profile(
    instances=1,
    stage="dev",
    environment="devel",
    cluster=CLUSTER_NAME + "-" + AWS_REGION,
    production=False,
    autoscaling="standard-nonprod"
)

jobs = []
task_res = Resources(cpu=0.5, ram=1 * GB, disk=512 * MB)

for profile in [DEV, INT, CERT, CERTRV, PRODRV, PRODUCTION]:
    server_task = Task(
        name="run server",
        processes=[
            Process(
                name="start server",
                cmdline="""export JAVA_HOME=/usr/lib/jvm/java-8-oracle &&"""
                        """ java -Xmx750m -Xms512m """
                        """ -jar /opt/hmh/demo/hello-world.jar"""
                        """ --server.port={{thermos.ports[http]}} """
            ).bind(profile=profile)
        ],
        resources=task_res
    )

    jobs.append(Service(
        name=APP_NAME,
        update_config=UpdateConfig(batch_size=1, watch_secs=30).bind(profile=profile),
        task=server_task,
        role="{{profile.role}}",
        contact="{{profile.contact}}",
        environment="{{profile.environment}}",
        cluster="{{profile.cluster}}",
        instances="{{profile.instances}}",
        production="{{profile.production}}",
        constraints={"host": "limit:1", "rack": "limit:3","autoscale-type": "{{profile.autoscaling}}"},
        announce=Announcer(),
        container=Container(
            docker=Docker(
                image="{{profile.docker_container}}:{{profile.docker_tag}}"
            ).bind(profile=profile)
        )
    ).bind(profile=profile))